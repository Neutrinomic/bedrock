type Action = variant { Meta : MetaAction; Ledger : LedgerAction };
type ApplyStatus = variant {
  Ok;
  Err : record { error : text };
  Pass : record { reason : text };
};
type Event = variant { Meta : MetaEvent; Ledger : LedgerEvent };
type LedgerAction = variant {
  Coinbase : record { to : blob; amount : nat };
  Transfer : record { to : blob; from : blob; amount : nat };
};
type LedgerEvent = variant {
  Coinbase : record { to : blob; amount : nat };
  Transfer : record { to : blob; from : blob; amount : nat };
};
type MetaAction = variant {
  SetChainName : record { name : text };
  BumpCounter;
};
type MetaEvent = variant {
  SetChainName : record { name : text };
  BumpCounter : record { new_counter : nat64 };
};
service : {
  apply_block : (vec Action) -> (vec ApplyStatus);
  clear_all : () -> ();
  events_len : () -> (nat64) query;
  get_balance : (blob) -> (nat) query;
  get_event : (nat64) -> (opt Event) query;
  meta_get_chain_name : () -> (opt text) query;
  meta_get_counter : () -> (nat64) query;
  reset_and_replay : () -> ();
  txn_commit_all : () -> ();
  txn_commit_oldest : () -> ();
  txn_commit_top : () -> ();
  txn_push_layer : () -> ();
  txn_revert_top : () -> ();
}
